 `timescale 1ns/1ps
module muxt(l0,l1,s,y1);
input[4:0] l0,l1;
input s;
output[4:0] y1;
assign y1=s ? l1 : l0 ;
endmodule
//****************************************
`timescale 1ns/1ps
module test_muxt;
    reg[4:0] L0,L1;
    reg S;
    wire[4:0] out;
    
    muxt r1(L0,L1,S,out);
    
    initial
    begin
        L0=4'd1; L1=4'd0; S=1'b0;
        #10; L0=4'd1; L1=4'd0; S=1'b1;
        #50 $stop;
    end
endmodule

//****************************************************************
 `timescale 1ns/1ps
module muxtwo(i0,i1,s,y);
input[31:0] i0,i1;
input s;
output[31:0] y;
assign y=s ? i1 : i0 ;
endmodule
//****************************************
`timescale 1ns/1ps
module test_muxtwo;
    reg[31:0] I0,I1;
    reg S;
    wire[31:0] out;
    
    muxtwo r1(I0,I1,S,out);
    
    initial
    begin
        I0=32'd1; I1=32'd0; S=1'b0;
        #10; I0=32'd1; I1=32'd0; S=1'b1;
        #50 $stop;
    end
endmodule

//****************************************************************

`timescale 1ns/1ps
module muxfour(i0,i1,i2,i3,s0,s1,y);
input[31:0] i0,i1,i2,i3;
input s0,s1;
output[31:0] y;
assign y=s0?(s1?i3:i1):(s1?i2:i0);
endmodule

//*************************************
`timescale 1ns/1ps
module test_muxfour;
    reg[31:0] I0,I1,I2,I3;
    reg S0,S1;
    wire[31:0] out;
    
    muxfour r1(I0,I1,I2,I3,S0,S1,out);
    
    initial
    begin
        I0=32'd0; I1=32'd0; I2=32'd1; I3=32'd1; S0=1'b0; S1=1'b0;
        #10; I0=32'd1; I3=32'd0; S0=1'b1; S1=1'b0;
    end
endmodule

//****************************************************************

`timescale 1ns/1ps
module instmem(instruct,op,readrg1,readrg2,writerg,shift,func,datai,jump,pcup);
    input [31:0]instruct;
    output[5:0]op;
    output[4:0]readrg1,readrg2,writerg,shift;
    output[5:0]func;
    output[15:0]datai;
    output[25:0]jump;
    output[3:0]pcup;

  reg [31:0]inst;
   always@(instruct or inst)
   begin
       case(instruct)
           32'd0 : inst=32'b10001100011000100000100000000000 ; //LW
           32'd1 : inst=32'b10101100011000100000100000000000 ; //SW
           32'd2 : inst=32'b00010000011000110001100000000000 ; //beq
           32'd3 : inst=32'b00000000011000100000100000100000 ; //add
           32'd4 : inst=32'b00000000011000100000100000100010 ; //sub
           32'd5 : inst=32'b00000000011000100000100000100100 ; //AND
           32'd6 : inst=32'b00000000011000100000100000100101 ; //OR
           32'd7 : inst=32'b00000100011000100000100000100000 ; //addi
           32'd8 : inst=32'b11111100011000100000100000100000 ; //jump
           default : inst=32'b00000100011000100000100000100000 ;
   endcase
   end
   
    integer i,j;
    reg [5:0]op,func;
    reg[4:0]readrg1,readrg2,writerg,shift;
    reg[15:0]datai;
    reg[25:0]jump;
    reg[3:0]pcup;
    
always@(inst or i or j)
begin
    j=0;
    for(i = 26 ; i <= 31 ; i = i + 1)
    begin
        op[j]=inst[i];
        j=j+1;
    end
    j=0;
    for(i = 21 ; i <= 25 ; i = i + 1)
    begin
        readrg1[j]=inst[i];
        j=j+1;
    end
     j=0;
    for(i = 16 ; i <= 20 ; i = i + 1)
    begin
        readrg2[j]=inst[i];
        j=j+1;
    end
     j=0;
    for(i = 11 ; i <= 15 ; i = i + 1)
    begin
        writerg[j]=inst[i];
        j=j+1;
    end
     j=0;
    for(i = 6 ; i <= 10 ; i = i + 1)
    begin
        shift[j]=inst[i];
        j=j+1;
    end
     j=0;
    for(i = 0 ; i <= 5 ; i = i + 1)
    begin
        func[j]=inst[i];
        j=j+1;
    end
    j=0;
    for(i = 0 ; i <= 15 ; i = i + 1)
    begin
        datai[j]=inst[i];
        j=j+1;
    end
    j=0;
    for(i = 0 ; i <= 25 ; i = i + 1)
    begin
        jump[j]=inst[i];
        j=j+1;
    end
    j=0;
    for(i = 28 ; i <= 31 ; i = i + 1)
    begin
        pcup[j]=inst[i];
        j=j+1;
    end
    end
endmodule
 
//*********************************************************

`timescale 1ns/1ps
module test_instmem;
    reg [31:0]INSTRUCT;
    wire[5:0]op;
    wire[4:0]readrg1,readrg2,writerg,shift;
    wire[5:0]func;
    wire[15:0]datai;
    wire[25:0]jump;
    wire[3:0]pcup;
    
    instmem i1(INSTRUCT,op,readrg1,readrg2,writerg,shift,func,datai,jump,pcup);
    
    initial
    begin
   INSTRUCT=32'd0;
   #5 INSTRUCT=32'd3;
    end
endmodule

//****************************************************************

`timescale 1ns/1ps
module fileregister(readrg1,readrg2,writerg,writedata,regwrite,data1,data2);
    input[4:0] readrg1,readrg2,writerg;
    input[31:0] writedata;
    input regwrite;
    integer i;
    output[31:0] data1,data2;
    reg[31:0] data1,data2;
    reg[31:0]file_reg[31:0];
    initial 
    begin
         for(i = 0;i <= 31;i = i + 1)
        file_reg[i]=32'd7;
    end
    always@(regwrite or readrg1 or readrg2 or writedata)
    begin
        if(regwrite)
        file_reg[writerg]=writedata;
        else
        begin
            data1=file_reg[readrg1];
            data2=file_reg[readrg2];
        end
    end
endmodule
//*****************************************************************

`timescale 1ns/1ps
module test_fileregister;
    reg[4:0]READRG1,READRG2,WRITERG;
    reg[31:0]WRITEDATA;
    reg REGWRITE;
    wire[31:0] data1,data2;
    
 fileregister i1(READRG1,READRG2,WRITERG,WRITEDATA,REGWRITE,data1,data2);
    
    initial
    begin
        READRG1=5'b00000; READRG2=5'b00001; WRITERG=5'b00010; WRITEDATA=32'd0; REGWRITE=1'b0;
        #5 READRG1=5'b00100; READRG2=5'b00101; WRITERG=5'b00011; WRITEDATA=32'd0; REGWRITE=1'b1;
    end
endmodule

//****************************************************************

`timescale 1ns/1ps
module ALU(a,b,ctrlalu,n,c,z,ov,res);
input[31:0]a,b;
input[3:0]ctrlalu;
output n,c,z,ov;
output[31:0]res;
reg n,c,z,ov;
reg [31:0]res;
reg [30:0]res1; 

 initial
begin
    n=1'b0;
    c=1'b0;
    z=1'b0;
    ov=1'b0;
end
 always@(ctrlalu or res or n or c or z or ov)
 begin
 
 if(ctrlalu == 4'b0010)
 begin
      assign {c,res}=a+b;
      assign {n,res}=a+b;
      if(res == 32'd0)  z=1'b1;
      else z=1'b0;
      if(((a[31]==0) & (b[31]==0)) || ((a[31]==1) & (b[31]==1)))   ov=1'b1;
      else  ov=1'b0; 
 end
 
 else if(ctrlalu == 4'b0110)
  begin
      assign {c,res}=a-b;
      assign {n,res}=a-b;
      if(res == 32'd0)  z=1'b1;
      else z=1'b0;
      if(((a[31]==0) & (b[31]==0)) || ((a[31]==1) & (b[31]==1)))   ov=1'b1;
      else  ov=1'b0; 
 end
 
 else if(ctrlalu == 4'b0000)
 begin
      assign res=a&b;
      assign {n,res1}= res + 32'd0;
      if(res == 32'd0)  z=1'b1;
      else  z=1'b0;
 end
 
 else if(ctrlalu == 4'b0001)
 begin
      assign res=a^b;
      assign {n,res1}= res + 32'd0;
      if(res == 32'd0)  z=1'b1;
      else  z=1'b0;
 end
 
 else if(ctrlalu == 4'b1000)  res = ~ a;
 else      res = b;
 
 end
  
endmodule

//************************************************************************
`timescale 1ns/1ps
module test_ALU;
reg [31:0]A,B;
reg [3:0]CTRLALU;
wire N,C,Z,OV;
wire[31:0]RES;

ALU i1(A,B,CTRLALU,N,C,Z,OV,RES); 

initial
begin
    A=32'd8; B=32'd0; CTRLALU=4'b0010;
    #5 A=32'd0; B=32'd8; CTRLALU=4'b0110;
    #5 A=32'd0; B=32'd8; CTRLALU=4'b0000;
    #5 A=32'd22; B=32'd5; CTRLALU=4'b0001;
    #5 A=32'd1;  CTRLALU=4'b1000;
    #5 B=32'd0; CTRLALU=4'b1111;
end
endmodule

//****************************************************************

`timescale 1ns/1ps
module datamem(memread,memwrite,res,data2,datarg);
    input[31:0] res,data2;
    input memread,memwrite;
    output[31:0]datarg;
    reg[31:0]memory[10:0];
    initial
    begin
        memory[0]=32'h00AB1123;
        memory[1]=32'h00001187;
        memory[2]=32'hAA860000;
        memory[3]=32'h00000011;
        memory[4]=32'h54330033;
        memory[5]=32'h11001111;
        memory[6]=32'hBC981CCC;
        memory[7]=32'h11100990;
        memory[8]=32'h00000000;
        memory[9]=32'h1133440A;
    end
    reg [31:0]datarg;
    always@(memread or memwrite or res or data2)
    begin
        if(memread)
         datarg=memory[res];
        else if(memwrite)
         memory[res]=data2;
         else
         memory[res]=32'h00AB1123;
    end
endmodule

//***************************************************************

`timescale 1ns/1ps
module test_datamemory;
    reg [31:0] RES,DATA2;
    reg MEMREAD,MEMWRITE;
    wire [31:0] datarg;
    
    datamem i1(MEMREAD,MEMWRITE,RES,DATA2,datarg);
    
    initial
    begin
        MEMREAD=1'b0; MEMWRITE=1'b1; RES=32'd8; DATA2=32'd1;
        #5 MEMREAD=1'b1; MEMWRITE=1'b0; RES=32'd6; DATA2=32'd1;  
    end
endmodule
    
//****************************************************************

`timescale 1ns/1ps
module control(op,datai,func,jump,pcup,regdst,alusrc,memtoreg,regwrite,memread,mewrite,branch,aluop,ctrlalu,sign,signex,jumpex);

input [5:0]op;
input [15:0]datai;
input [5:0]func;
input [25:0]jump;
input [3:0]pcup;
output regdst,alusrc,memtoreg,regwrite,memread,mewrite,branch;
output[1:0]aluop;
output[3:0]ctrlalu;
output[31:0]sign,signex,jumpex;    

//*******************************************************************

reg regdst,alusrc,memtoreg,regwrite,memread,mewrite,branch;
reg[27:0]jum;
reg[1:0]aluop;
reg[3:0]ctrlalu;
reg[31:0]sign,signex,jumpex,s,p;    

always@(op or func or s)
begin
    case(op)
        6'b100011 : begin regdst=1'b0; alusrc=1'b1; memtoreg=1'b1; regwrite=1'b1; memread=1'b1; mewrite=1'b0; branch=1'b0; aluop=2'b00; end //LW
        6'b101011 : begin regdst=1'bx; alusrc=1'b1; memtoreg=1'bx; regwrite=1'b0; memread=1'b0; mewrite=1'b1; branch=1'b0; aluop=2'b00; end //SW
        6'b000100 : begin regdst=1'bx; alusrc=1'b0; memtoreg=1'bx; regwrite=1'b0; memread=1'b0; mewrite=1'b0; branch=1'b1; aluop=2'b01; end //beq
        6'b000000 : begin regdst=1'b1; alusrc=1'b0; memtoreg=1'b0; regwrite=1'b1; memread=1'b0; mewrite=1'b0; branch=1'b0; aluop=2'b10; end //Rtype
        6'b000001 : begin regdst=1'b0; alusrc=1'b1; memtoreg=1'b0; regwrite=1'b1; memread=1'b0; mewrite=1'b0; branch=1'b0; aluop=2'b10; end //addi
        6'b111111 : begin regdst=1'bx; alusrc=1'bx; memtoreg=1'bx; regwrite=1'bx; memread=1'bx; mewrite=1'bx; branch=1'b0; aluop=2'bxx; end //jump.. branch felan=0
        default   : begin regdst=1'b1; alusrc=1'b0; memtoreg=1'b0; regwrite=1'b1; memread=1'b0; mewrite=1'b0; branch=1'b0; aluop=2'b10; end

endcase

if(func == 6'b000000)
case(aluop)
    2'b00   : ctrlalu=4'b0010;//+
    2'b01   : ctrlalu=4'b0110;//-
    default : ctrlalu=4'b0110;
endcase

if(aluop == 2'b10)
case(func)
    6'b100000 : ctrlalu=4'b0010;//+
    6'b100010 : ctrlalu=4'b0110;//-
    6'b100100 : ctrlalu=4'b0000;//&
    6'b100101 : ctrlalu=4'b0001;//^
    default   : ctrlalu=4'b0110;
endcase

if(op == 6'b000001)  ctrlalu=4'b0010;

s=32'd0;
p=32'd0; 

sign = s ^ datai; 
signex=sign * 4;


jum=jump * 4;        //shift 25 bit   
s=s ^ jum;           //signex dar 32 bit
p=pcup * 268435456; //2^28>>shift be chap
jumpex=p ^ s;       //concat addr ba pcup
end

endmodule

//*********************************************************************

`timescale 1ns/1ps
module test_cotrol;
reg [5:0]OP;
reg [15:0]DATAI;
reg [5:0]FUNC;
reg [25:0]JUMP;
reg [3:0]PCUP;
wire regdst,alusrc,memtoreg,regwrite,memread,mewrite,branch;
wire[1:0]aluop;
wire[3:0]ctrlalu;
wire[31:0]sign,signex,jumpex;

control i1(OP,DATAI,FUNC,JUMP,PCUP,regdst,alusrc,memtoreg,regwrite,memread,mewrite,branch,aluop,ctrlalu,sign,signex,jumpex);

initial
begin
    OP=6'b011000; DATAI=16'b0000001111111010; FUNC=6'b101011; JUMP=26'd10; PCUP=4'b1111;
    #5OP=6'b110010; DATAI=16'b1111100000101010; FUNC=6'b111100;JUMP=26'd10; PCUP=4'b0000;
end
endmodule

//*********************************************************************

module contrl2(branch,z,op,t0,t1);
    input branch,z;
    input [5:0] op;
    output t0,t1;
    
    reg x;
    reg t0,t1;
    always@(op or t0 or t1 or x)
    begin
        
    x=branch & z;
    if(op == 6'b111111)           //jump
      begin
        t0=1'b0; t1=1'b1; end
        
    else if((op == 6'b000100) & (x == 1'b1))     //beq
      begin
        t0=1'b1; t1=1'b0; end
      
    else if(x == 1'b0)                //pc+4
      begin
          t0=1'b0; t1=1'b0; end
    else
      begin
          t0=1'b1; t1=1'b1; end
      end
endmodule

//******************************************************************
        
module test_contrl2;
    reg BRANCH,Z;
    reg [5:0]OP;
    wire t0,t1;
    
    contrl2 i1(BRANCH,Z,OP,t0,t1);
    initial
    begin
        
    BRANCH=1'b1; Z=1'b1; OP=6'b000100;
    #5 BRANCH=1'b1; Z=1'b0; OP=6'b111111;
    
end
endmodule

//*********************************************************************

module datapath(instruct,pcnext);

input[31:0] instruct;
output[31:0] pcnext;

reg[31:0] four;
reg[3:0] add;
initial
begin
    four=32'd4;
    add=4'b0010;
end

reg[31:0] a,b,writedata,i0,i1,i2,i3;
reg[4:0]l0,l1;
reg s,s0,s1;

wire[31:0] sign,signex,data2,jumpex,datarg,data1,res,res1,res2,y;
wire[25:0] jump;
wire[15:0] datai;
wire[5:0] op,func;
wire[4:0] readrg1,readrg2,writerg,shift,y1;
wire[3:0] pcup,ctrlalu;
wire[1:0] aluop;
wire z,n,c,ov,t0,t1,branch,regdst,alusrc,regwrite,memtoreg,memread,mewrite;


instmem I1(instruct,op,readrg1,readrg2,writerg,shift,func,datai,jump,pcup);
control C1(op,datai,func,jump,pcup,regdst,alusrc,memtoreg,regwrite,memread,mewrite,branch,aluop,ctrlalu,sign,signex,jumpex);
muxt M0(readrg2,writerg,regdst,writerg);
fileregister F1(readrg1,readrg2,writerg,writedata,regwrite,data1,data2);    
muxtwo W0(data2,sign,alusrc,y);
ALU A1(data1,y,ctrlalu,n,c,z,ov,res); 
datamem D1(memread,memwrite,res,data2,datarg);
muxtwo W1(res,datarg,memtoreg,y);
fileregister F2(readrg1,readrg2,writerg,y,rgwrite,data1,data2);
ALU A2(instruct,four,add,n,c,z,ov,res1);
ALU A3(res1,signex,add,n,c,z,ov,res2);
contrl2 L1(branch,z,op,t0,t1);
muxfour K0(res1,res2,jumpex,i3,t0,t1,pcnext);

endmodule

//*******************************************************************

module test_datapath;
  reg[31:0] INSTRUCT;
  wire[31:0] pcnext;
    
  datapath q1(INSTRUCT,pcnext);
    
  initial
    begin
      
    INSTRUCT=32'd0;     //lw
    #2 INSTRUCT=32'd1;  //sw
    #2 INSTRUCT=32'd2;  //beq
    #2 INSTRUCT=32'd3;  //add
    #2 INSTRUCT=32'd4;  //sub
    #2 INSTRUCT=32'd5;  //and
    #2 INSTRUCT=32'd6;  //or
    #2 INSTRUCT=32'd7;  //addi
    #2 INSTRUCT=32'd8;  //jump
    
    end
endmodule

